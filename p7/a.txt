******************
******************

******************
exit()是标准函数，先执行一个标准I/O库的清理关闭操作，
在进入内核；_exit _Exit是系统调用，将直接进入内核。

******************
对于linux而言，系统启动后内核启动第一个进程/sbin/init
如果我们用ssh连接，init进程会exec启动ssh进程，ssh进程
通过exec执行终端进程(pts),终端进程启动bash进程，bash
进程负责main函数的启动和回收工作。上述所描述的_exit
 _Exit函数和return的区别就是前者直接进入内核，后者
按照上述顺序依次返回。

******************
setjmp不仅仅是在函数栈中插入一个用例，然后利用longjmp
返回从而到达长跳转的目的。setjmp关键的部分是它还将目前
的栈信息做了保存，以便将来回复。凡是在函数栈中保存的信
息，setjmp函数都会保存。其他的信息保持原值。

setjmp不会改变的值包括：
静态变量： static修饰的任何变量
全局变量：所有的全局变量
volatile: volatile修饰的变量

其他变量都会被保存：
局部变量：函数内部声明的所有变量
寄存器变量： register修饰的变量

******************
关于复合语句内部变量的生命周期
下面代码的错在对b的引用上，我们知道在函数体内部定义的变量
的生命周期等于函数的生命周期，在复合语句定义变量等于复合
语句的生命周期。下面b变量在if(){}结束后，b变量会出栈，其他
程序很有可能会修改b值，会造成ptr的返回值出错。
int *ptr;
if(a == 1){
	int b;
	b=5;
	ptr = &b;
}

return ptr;
